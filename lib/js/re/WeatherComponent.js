// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var Temp        = require("./Temp.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var TextRe      = require("bs-react-native/lib/js/src/components/textRe.js");
var BatList     = require("bs-batteries/lib/js/src/batList.js");
var Js_math     = require("bs-platform/lib/js/js_math.js");
var Weather     = require("./Weather.js");
var Forecast    = require("./Forecast.js");
var MomentRe    = require("bs-moment/lib/js/src/MomentRe.js");
var ReactNative = require("bs-react-native/lib/js/src/reactNative.js");
var ReasonReact = require("reason-react/lib/js/src/reasonReact.js");

function ste(prim) {
  return prim;
}

function precToStr(p) {
  if (typeof p === "number") {
    return "";
  } else {
    switch (p.tag | 0) {
      case 0 : 
          return "Rain: " + p[0].toString();
      case 1 : 
          return "Snow: " + p[0].toString();
      case 2 : 
          return "Rain: " + p[0].toString() + " Snow: " + p[1].toString();
      
    }
  }
}

var zip = "11221";

function currentSeconds() {
  return Date.now() / 1000.0;
}

var component = ReasonReact.reducerComponent("Weather");

function fetchCurrent(apiKey) {
  return Forecast.fetchCurrentByZip(apiKey, zip).then((function (res) {
                return Promise.resolve(Weather.fromCurrent(res));
              }));
}

function fetchNext(apiKey) {
  return Forecast.fetchNextByZip(apiKey, zip).then((function (res) {
                  return Promise.resolve(Weather.fromNext(res));
                })).then((function (ws) {
                return Promise.resolve(BatList.take(4, BatList.filter((function (w) {
                                      return +(w[/* timestamp */0] >= Date.now() / 1000.0);
                                    }), ws)));
              }));
}

function make(apiKey, _) {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      var current = function () {
        return fetchCurrent(apiKey).then((function (w) {
                        return Promise.resolve(Curry._2(self[/* reduce */3], (function () {
                                          return /* FetchCurrentSuccess */Block.__(0, [w]);
                                        }), /* () */0));
                      })).catch((function (err) {
                      return Promise.resolve(Curry._2(self[/* reduce */3], (function () {
                                        return /* FetchFail */Block.__(2, [err]);
                                      }), /* () */0));
                    }));
      };
      var next = function () {
        return fetchNext(apiKey).then((function (ws) {
                        return Promise.resolve(Curry._2(self[/* reduce */3], (function () {
                                          return /* FetchNextSuccess */Block.__(1, [ws]);
                                        }), /* () */0));
                      })).catch((function (err) {
                      return Promise.resolve(Curry._2(self[/* reduce */3], (function () {
                                        return /* FetchFail */Block.__(2, [err]);
                                      }), /* () */0));
                    }));
      };
      current(/* () */0);
      next(/* () */0);
      self[/* state */4][/* currentTimerId */3][0] = /* Some */[setInterval((function () {
                current(/* () */0);
                return /* () */0;
              }), 10000)];
      self[/* state */4][/* nextTimerId */4][0] = /* Some */[setInterval((function () {
                next(/* () */0);
                return /* () */0;
              }), 300000)];
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (param) {
      var state = param[/* state */4];
      var match = state[/* status */2];
      if (typeof match === "number") {
        if (match !== 0) {
          return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* array */[
                            ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[Temp.degrees(state[/* current */0][/* temp */1])])),
                            ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[state[/* current */0][/* title */5]])),
                            ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[precToStr(state[/* current */0][/* precipitation */6])])),
                            $$Array.of_list(BatList.map((function (w) {
                                        return ReasonReact.element(/* Some */[w[/* timestamp */0].toString()], /* None */0, Curry.app(ReactNative.View[/* make */0], [
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* None */0,
                                                        /* array */[
                                                          ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[(function (param) {
                                                                          return param.fromNow(/* Some */[/* false */0]);
                                                                        })(MomentRe.momentWithUnix(Js_math.floor_int(w[/* timestamp */0])))])),
                                                          ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */[w[/* title */5]]))
                                                        ]
                                                      ]));
                                      }), state[/* next */1]))
                          ]
                        ]));
        } else {
          return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* None */0,
                          /* array */[ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */["Loading..."]))]
                        ]));
        }
      } else {
        return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* None */0,
                        /* array */[ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* array */["error"]))]
                      ]));
      }
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* current */Weather.kelvinToFarenheit(Weather.make(/* () */0)),
              /* next */BatList.make(0, Weather.kelvinToFarenheit(Weather.make(/* () */0))),
              /* status : Init */0,
              /* currentTimerId */[/* None */0],
              /* nextTimerId */[/* None */0]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      switch (action.tag | 0) {
        case 0 : 
            return /* Update */Block.__(0, [/* record */[
                        /* current */Weather.kelvinToFarenheit(action[0]),
                        /* next */state[/* next */1],
                        /* status : Success */1,
                        /* currentTimerId */state[/* currentTimerId */3],
                        /* nextTimerId */state[/* nextTimerId */4]
                      ]]);
        case 1 : 
            return /* Update */Block.__(0, [/* record */[
                        /* current */state[/* current */0],
                        /* next */List.map(Weather.kelvinToFarenheit, action[0]),
                        /* status : Success */1,
                        /* currentTimerId */state[/* currentTimerId */3],
                        /* nextTimerId */state[/* nextTimerId */4]
                      ]]);
        case 2 : 
            var error = action[0];
            console.log(error);
            return /* Update */Block.__(0, [/* record */[
                        /* current */state[/* current */0],
                        /* next */state[/* next */1],
                        /* status : Error */[error],
                        /* currentTimerId */state[/* currentTimerId */3],
                        /* nextTimerId */state[/* nextTimerId */4]
                      ]]);
        
      }
    });
  return newrecord;
}

exports.ste            = ste;
exports.precToStr      = precToStr;
exports.zip            = zip;
exports.currentSeconds = currentSeconds;
exports.component      = component;
exports.fetchCurrent   = fetchCurrent;
exports.fetchNext      = fetchNext;
exports.make           = make;
/* component Not a pure module */
