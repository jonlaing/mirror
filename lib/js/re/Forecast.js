// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Temp        = require("./Temp.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Json_decode = require("bs-json/lib/js/src/Json_decode.js");

function hr3(json) {
  return Json_decode.field("3hr", Json_decode.$$int, json);
}

function all(json) {
  return Json_decode.field("all", Json_decode.$$int, json);
}

function weather(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* title */Json_decode.field("main", Json_decode.string, json),
          /* description */Json_decode.field("description", Json_decode.string, json),
          /* icon */Json_decode.field("icon", Json_decode.string, json)
        ];
}

function additional(json) {
  return /* record */[
          /* temp */Temp.ofKelvin(Json_decode.field("temp", Json_decode.$$float, json)),
          /* pressure */Json_decode.field("pressure", Json_decode.$$float, json),
          /* humidity */Json_decode.field("humidity", Json_decode.$$int, json),
          /* tempMin */Temp.ofKelvin(Json_decode.field("temp_min", Json_decode.$$float, json)),
          /* tempMax */Temp.ofKelvin(Json_decode.field("temp_max", Json_decode.$$float, json)),
          /* visibility */Json_decode.optional((function (param) {
                  return Json_decode.field("visibility", Json_decode.$$int, param);
                }), json),
          /* name */Json_decode.optional((function (param) {
                  return Json_decode.field("name", Json_decode.string, param);
                }), json)
        ];
}

function current(json) {
  return /* record */[
          /* timestamp */Json_decode.field("dt", Json_decode.$$float, json),
          /* basic */Json_decode.field("weather", (function (param) {
                  return Json_decode.list(weather, param);
                }), json),
          /* clouds */Json_decode.optional((function (param) {
                  return Json_decode.field("clouds", all, param);
                }), json),
          /* rain */Json_decode.optional((function (param) {
                  return Json_decode.field("rain", hr3, param);
                }), json),
          /* snow */Json_decode.optional((function (param) {
                  return Json_decode.field("snow", hr3, param);
                }), json),
          /* additional */Json_decode.field("main", additional, json)
        ];
}

function next(json) {
  return /* record */[/* list */Json_decode.field("list", (function (param) {
                  return Json_decode.list(current, param);
                }), json)];
}

var Decode = /* module */[
  /* hr3 */hr3,
  /* all */all,
  /* weather */weather,
  /* additional */additional,
  /* current */current,
  /* next */next
];

function withAPIKey(key, uri) {
  return uri + "&APPID=" + key;
}

function withLatLong(lat, $$long, uri) {
  return uri + "&lat=" + lat.toString() + "&long=" + $$long.toString();
}

function withZip(zip, uri) {
  return uri + "&zip=" + zip + ",us";
}

function fetch_(decode, apiKey, resource) {
  return fetch(withAPIKey(apiKey, resource)).then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(Curry._1(decode, json));
              }));
}

function fetchCurrent(param, param$1) {
  return fetch_(current, param, param$1);
}

function fetchNext(param, param$1) {
  return fetch_(next, param, param$1);
}

function fetchCurrentByCoords(apiKey, latitude, longitude) {
  return fetchCurrent(apiKey, withLatLong(latitude, longitude, "https://api.openweathermap.org/data/2.5/weather?"));
}

function fetchCurrentByZip(apiKey, zip) {
  return fetchCurrent(apiKey, withZip(zip, "https://api.openweathermap.org/data/2.5/weather?"));
}

function fetchNextByCoords(apiKey, latitude, longitude) {
  return fetchNext(apiKey, withLatLong(latitude, longitude, "https://api.openweathermap.org/data/2.5/forecast?"));
}

function fetchNextByZip(apiKey, zip) {
  return fetchNext(apiKey, withZip(zip, "https://api.openweathermap.org/data/2.5/forecast?"));
}

exports.Decode               = Decode;
exports.withAPIKey           = withAPIKey;
exports.withLatLong          = withLatLong;
exports.withZip              = withZip;
exports.fetch_               = fetch_;
exports.fetchCurrent         = fetchCurrent;
exports.fetchNext            = fetchNext;
exports.fetchCurrentByCoords = fetchCurrentByCoords;
exports.fetchCurrentByZip    = fetchCurrentByZip;
exports.fetchNextByCoords    = fetchNextByCoords;
exports.fetchNextByZip       = fetchNextByZip;
/* No side effect */
