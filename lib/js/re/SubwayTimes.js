// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var GTFS        = require("./GTFS.js");
var Json_decode = require("bs-json/lib/js/src/Json_decode.js");

function stopTimeEvent(json) {
  return /* record */[/* time */Json_decode.optional((function (param) {
                  return Json_decode.field("time", Json_decode.$$int, param);
                }), json)];
}

function vehicleDescriptor(json) {
  return /* record */[
          /* id */Json_decode.optional((function (param) {
                  return Json_decode.field("id", Json_decode.string, param);
                }), json),
          /* label */Json_decode.optional((function (param) {
                  return Json_decode.field("label", Json_decode.string, param);
                }), json),
          /* licensePlate */Json_decode.optional((function (param) {
                  return Json_decode.field("license_plate", Json_decode.string, param);
                }), json)
        ];
}

function scheduleRelationship(json) {
  var match = Json_decode.$$int(json);
  if (match > 3 || match < 0) {
    return /* Unscheduled */2;
  } else {
    switch (match) {
      case 0 : 
          return /* Scheduled */0;
      case 1 : 
          return /* Added */1;
      case 2 : 
          return /* Unscheduled */2;
      case 3 : 
          return /* Canceled */3;
      
    }
  }
}

function stopTimeUpdate(json) {
  return /* record */[
          /* stopId */Json_decode.optional((function (param) {
                  return Json_decode.field("stop_id", Json_decode.string, param);
                }), json),
          /* arrival */Json_decode.optional((function (param) {
                  return Json_decode.field("arrival", stopTimeEvent, param);
                }), json),
          /* departure */Json_decode.optional((function (param) {
                  return Json_decode.field("departure", stopTimeEvent, param);
                }), json)
        ];
}

function tripDescriptor(json) {
  return /* record */[
          /* id */Json_decode.optional((function (param) {
                  return Json_decode.field("trip_id", Json_decode.string, param);
                }), json),
          /* routeId */Json_decode.optional((function (param) {
                  return Json_decode.field("route_id", Json_decode.string, param);
                }), json),
          /* directionId */Json_decode.optional((function (param) {
                  return Json_decode.field("direction_id", Json_decode.$$int, param);
                }), json),
          /* startDate */Json_decode.optional((function (param) {
                  return Json_decode.field("start_date", Json_decode.string, param);
                }), json),
          /* scheduleRelationship */Json_decode.optional((function (param) {
                  return Json_decode.field("schedule_relationship", scheduleRelationship, param);
                }), json)
        ];
}

function tripUpdate(json) {
  return /* record */[
          /* trip */Json_decode.field("trip", tripDescriptor, json),
          /* stopTimeUpdate */Json_decode.optional((function (param) {
                  return Json_decode.field("stop_time_update", (function (param) {
                                return Json_decode.list(stopTimeUpdate, param);
                              }), param);
                }), json),
          /* timestamp */Json_decode.optional((function (param) {
                  return Json_decode.field("timestamp", Json_decode.$$int, param);
                }), json),
          /* delay */Json_decode.optional((function (param) {
                  return Json_decode.field("delay", Json_decode.$$int, param);
                }), json)
        ];
}

function vehicleStopStatus(json) {
  var match = Json_decode.$$int(json);
  if (match !== 0) {
    if (match !== 1) {
      return /* InTransitTo */2;
    } else {
      return /* StoppedAt */1;
    }
  } else {
    return /* IncomingAt */0;
  }
}

function vehiclePosition(json) {
  return /* record */[
          /* trip */Json_decode.optional((function (param) {
                  return Json_decode.field("trip", tripDescriptor, param);
                }), json),
          /* currentStopSequence */Json_decode.optional((function (param) {
                  return Json_decode.field("current_stop_sequence", Json_decode.$$int, param);
                }), json),
          /* stopId */Json_decode.optional((function (param) {
                  return Json_decode.field("stop_id", Json_decode.string, param);
                }), json),
          /* currentStatus */Json_decode.optional((function (param) {
                  return Json_decode.field("current_status", vehicleStopStatus, param);
                }), json),
          /* timestamp */Json_decode.optional((function (param) {
                  return Json_decode.field("timestamp", Json_decode.$$int, param);
                }), json)
        ];
}

function timeRange(json) {
  return /* record */[
          /* startTime */Json_decode.optional((function (param) {
                  return Json_decode.field("start", Json_decode.$$int, param);
                }), json),
          /* endTime */Json_decode.optional((function (param) {
                  return Json_decode.field("end", Json_decode.$$int, param);
                }), json)
        ];
}

function entitySelector(json) {
  return /* record */[/* trip */Json_decode.optional((function (param) {
                  return Json_decode.field("trip", tripDescriptor, param);
                }), json)];
}

function alert(json) {
  return /* record */[
          /* informedEntity */Json_decode.field("informed_entity", (function (param) {
                  return Json_decode.list(entitySelector, param);
                }), json),
          /* headerText */Json_decode.field("header_text", Json_decode.string, json)
        ];
}

function feedEntity(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* tripUpdate */Json_decode.optional((function (param) {
                  return Json_decode.field("trip_update", tripUpdate, param);
                }), json),
          /* vehicle */Json_decode.optional((function (param) {
                  return Json_decode.field("vehicle", vehiclePosition, param);
                }), json),
          /* alert */Json_decode.optional((function (param) {
                  return Json_decode.field("alert", alert, param);
                }), json)
        ];
}

function feedMessage(json) {
  return /* record */[/* entity */Json_decode.field("entity", (function (param) {
                  return Json_decode.list(feedEntity, param);
                }), json)];
}

var Decode = /* module */[
  /* stopTimeEvent */stopTimeEvent,
  /* vehicleDescriptor */vehicleDescriptor,
  /* scheduleRelationship */scheduleRelationship,
  /* stopTimeUpdate */stopTimeUpdate,
  /* tripDescriptor */tripDescriptor,
  /* tripUpdate */tripUpdate,
  /* vehicleStopStatus */vehicleStopStatus,
  /* vehiclePosition */vehiclePosition,
  /* timeRange */timeRange,
  /* entitySelector */entitySelector,
  /* alert */alert,
  /* feedEntity */feedEntity,
  /* feedMessage */feedMessage
];

function withApiKey(apiKey, uri) {
  return uri + "&key=" + apiKey;
}

function withFeedId(feedId, uri) {
  return uri + "&feed_id=" + feedId;
}

function fetch_(apiKey, feedId) {
  return fetch(withFeedId(feedId, withApiKey(apiKey, "http://datamine.mta.info/mta_esi.php?"))).then((function (prim) {
                      return prim.arrayBuffer();
                    })).then((function (res) {
                    return Promise.resolve(Buffer.from(res));
                  })).then((function (res) {
                  return Promise.resolve(GTFS.decode(res));
                })).then((function (res) {
                return Promise.resolve(feedMessage(res));
              }));
}

exports.Decode     = Decode;
exports.withApiKey = withApiKey;
exports.withFeedId = withFeedId;
exports.fetch_     = fetch_;
/* GTFS Not a pure module */
