// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var List  = require("bs-platform/lib/js/list.js");
var Temp  = require("./Temp.js");
var Block = require("bs-platform/lib/js/block.js");

function make() {
  return /* record */[
          /* timestamp */Date.now(),
          /* temp */Temp.ofKelvin(0.0),
          /* tempMax */Temp.ofKelvin(0.0),
          /* tempMin */Temp.ofKelvin(0.0),
          /* code */0,
          /* title */"Loading...",
          /* precipitation : NoPrecipitation */0
        ];
}

function kelvinToCelcius(w) {
  return /* record */[
          /* timestamp */w[/* timestamp */0],
          /* temp */Temp.kelvinToCelcius(w[/* temp */1]),
          /* tempMax */Temp.kelvinToCelcius(w[/* tempMax */2]),
          /* tempMin */Temp.kelvinToCelcius(w[/* tempMin */3]),
          /* code */w[/* code */4],
          /* title */w[/* title */5],
          /* precipitation */w[/* precipitation */6]
        ];
}

function celciusToKelvin(w) {
  return /* record */[
          /* timestamp */w[/* timestamp */0],
          /* temp */Temp.celciusToKelvin(w[/* temp */1]),
          /* tempMax */Temp.celciusToKelvin(w[/* tempMax */2]),
          /* tempMin */Temp.celciusToKelvin(w[/* tempMin */3]),
          /* code */w[/* code */4],
          /* title */w[/* title */5],
          /* precipitation */w[/* precipitation */6]
        ];
}

function celciusToFarenheit(w) {
  return /* record */[
          /* timestamp */w[/* timestamp */0],
          /* temp */Temp.celciusToFarenheit(w[/* temp */1]),
          /* tempMax */Temp.celciusToFarenheit(w[/* tempMax */2]),
          /* tempMin */Temp.celciusToFarenheit(w[/* tempMin */3]),
          /* code */w[/* code */4],
          /* title */w[/* title */5],
          /* precipitation */w[/* precipitation */6]
        ];
}

function farenheitToCelcius(w) {
  return /* record */[
          /* timestamp */w[/* timestamp */0],
          /* temp */Temp.farenheitToCelcius(w[/* temp */1]),
          /* tempMax */Temp.farenheitToCelcius(w[/* tempMax */2]),
          /* tempMin */Temp.farenheitToCelcius(w[/* tempMin */3]),
          /* code */w[/* code */4],
          /* title */w[/* title */5],
          /* precipitation */w[/* precipitation */6]
        ];
}

function farenheitToKelvin(w) {
  return /* record */[
          /* timestamp */w[/* timestamp */0],
          /* temp */Temp.farenheitToKelvin(w[/* temp */1]),
          /* tempMax */Temp.farenheitToKelvin(w[/* tempMax */2]),
          /* tempMin */Temp.farenheitToKelvin(w[/* tempMin */3]),
          /* code */w[/* code */4],
          /* title */w[/* title */5],
          /* precipitation */w[/* precipitation */6]
        ];
}

function kelvinToFarenheit(w) {
  return /* record */[
          /* timestamp */w[/* timestamp */0],
          /* temp */Temp.kelvinToFarenheit(w[/* temp */1]),
          /* tempMax */Temp.kelvinToFarenheit(w[/* tempMax */2]),
          /* tempMin */Temp.kelvinToFarenheit(w[/* tempMin */3]),
          /* code */w[/* code */4],
          /* title */w[/* title */5],
          /* precipitation */w[/* precipitation */6]
        ];
}

function fromCurrent(forecast) {
  var prec = function (f) {
    var match = f[/* rain */3];
    var match$1 = f[/* snow */4];
    if (match) {
      var a = match[0];
      if (match$1) {
        return /* RainSnow */Block.__(2, [
                  a,
                  match$1[0]
                ]);
      } else {
        return /* Rain */Block.__(0, [a]);
      }
    } else if (match$1) {
      return /* Snow */Block.__(1, [match$1[0]]);
    } else {
      return /* NoPrecipitation */0;
    }
  };
  return /* record */[
          /* timestamp */forecast[/* timestamp */0],
          /* temp */forecast[/* additional */5][/* temp */0],
          /* tempMax */forecast[/* additional */5][/* tempMax */4],
          /* tempMin */forecast[/* additional */5][/* tempMin */3],
          /* code */List.hd(forecast[/* basic */1])[/* id */0],
          /* title */List.hd(forecast[/* basic */1])[/* title */1],
          /* precipitation */prec(forecast)
        ];
}

function fromNext(forecast) {
  return List.map(fromCurrent, forecast[/* list */0]);
}

exports.make               = make;
exports.kelvinToCelcius    = kelvinToCelcius;
exports.celciusToKelvin    = celciusToKelvin;
exports.celciusToFarenheit = celciusToFarenheit;
exports.farenheitToCelcius = farenheitToCelcius;
exports.farenheitToKelvin  = farenheitToKelvin;
exports.kelvinToFarenheit  = kelvinToFarenheit;
exports.fromCurrent        = fromCurrent;
exports.fromNext           = fromNext;
/* No side effect */
